import csv
import re

# Example line from the CSV
# "4950521","Structure Deck: Master of Pendulum Singles","Dragonpit Magician - SDMP-EN002 - Common 1st Edition","Near Mint 1st Edition English Yugioh Card","0.75","12",""

class Product:

    def __init__(self,productID,packName,productName,rarity,edition,condition,buyPrice,buyQuantity):
      self.productId = productID
      self.packName = packName
      self.productName = productName
      self.rarity = rarity
      self.edition = edition
      self.condition = condition
      self.buyPrice = buyPrice
      self.buyQuantity = buyQuantity

    def getProductId(self):return self.productID
    def setProductID(self,productID):self.productID = productID
    
    def getPackName(self):return self.packName
    def setPackName(self,packName):self.packName = packName
    
    def getProductName(self):return self.productName
    def setProductName(self,productName):self.productName = productName
    
    def getEdition(self):return self.edition
    def setEdition(self,edition):self.edition = edition
    
    def getCondition(self):return self.condition
    def setCondition(self,condition):self.condition = condition
    
    def getBuyPrice(self):return self.buyPrice
    def setBuyPrice(self,buyPrice):self.buyPrice = buyPrice
    
    def getBuyQuantity(self):return self.buyQuantity
    def setBuyQuantity(self,buyQuantity):self.buyQuantity = buyQuantity
	def __str__(self):return(self.productName)


singlesList = []
with open('YugiohSinglesBuylist (2).csv',newline="") as f:
	reader = csv.reader(f)
	count = 0
	for row in reader:
		if(count ==0):count = count + 1
		else:
			prod = Product(row[0],row[1],row[2],row[2],row[3],row[3],row[4],row[5])
			singlesList.append(prod)
			count = count + 1
			if(count == 4):break

#Little Section right here on BadCases for my parseProdName method
with open('YugiohSinglesBuylist (2).csv',newline="") as f:
	reader = csv.reader(f)
	count = 0
	for row in reader:
		if(count ==0):count = count + 1
		else:
			cardName = parseProdName(row[2])
			if(cardName == 'Nothing Found'):
				print(count)
				print(row[2])
				count = count+1
				badCases = badCases +1
			else:count = count +1
			
#TODO:finish writing the methods to clean
def parseYGOList(rowFromReader):
	productId = rowFromReader[0]
	packName = parsePackName(rowFromReader[2])
	cardName = parseProdName(rowFromReader[2])
	#rarity goes here !!If ultimate rare, check rowFromReader[2] for ultimate rare, i.e. "rare" card but "ultimate rare" version
	#edition here
	#condition
	buyPrice = rowFromReader[4]
	buyQuantity = rowFromReader[5]
	return (Product(productId,packName,cardName,rarity,edition,condition,buyPrice,butQuantity))
	

def parsePackName(compareToThis):

	#I have to do the ultimate rare case first becasue it will otherwise get caught in the regular regex
	#ultimate Rare case 3 or 4char set
	pattern = r'^Ultimate\sRare\s-\s.+\s-\s(.{3,4}-EN\d{3})'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
		
	#LEAVE THIS CASE BEFORE GENERIC CASE
	#Space dash between setName
	pattern = r'^.+\s-\s([A-Z]{2,4}\s-\s\d{0,2}.{0,1}[A-Z]{0,4}\d{1,3})'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
		
	#general case
	#ABC(D)-(EN)123
	#AB01-(EN)123
	
	#Removed non cap letters in setName
	pattern = r'^.+\s-\s([A-Z]{2,4}\d{0,2}.{0,1}[A-Za-z]{0,4}\d{1,3})'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
	
	#no dash inbetween setNum
	pattern = r'^.+-\s(.{4}\sEN\d{3})'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
	
	#bulk case
	pattern = r'^Random\s.*Yugioh\s.*'
	if(re.match(pattern,compareToThis) != None):
		return "Bulk"
	
	#World Champ case 2
	pattern = r'^.+\s-\s(.{4}-.{2}\d{3})'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
	
	#playmat case
	pattern = r'^Yugioh\s(.*\sPlaymat)'
	if(re.match(pattern,compareToThis) !=None):
		return "Playmat"
	
	#complete set 
	pattern = r'^.+Complete Set of Prize'
	if(re.match(pattern,compareToThis) != None):
		return "Complete Set"
		
	#marshmallon
	pattern = r'^Marshmallon Misprint'
	if(re.match(pattern,compareToThis) != None):
		return "Misprint"

	#no space dash before set num
	pattern = r'^.+\s([A-Z]{0,4}\d{0,2}-[A-Z]{0,4}\d{1,3})'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)

	return("Nothing Found")
	
#TODO:Make this shit smaller
def parseProdName(compareToThis):
	
	#I have to do the ultimate rare case first becasue it will otherwise get caught in the regular regex
	#ultimate Rare case 3 or 4char set
	pattern = r'^Ultimate\sRare\s-\s(.+)\s-\s(.{3,4}-EN\d{3})'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
		
	#LEAVE THIS CASE BEFORE GENERIC CASE
	#Space dash between setName
	pattern = r'^(.+)\s-\s[A-Z]{2,4}\s-\s\d{0,2}.{0,1}[A-Z]{0,4}\d{1,3}'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
		
	#general case
	#ABC(D)-(EN)123
	#AB01-(EN)123
	
	#Removed non cap letters in setName
	pattern = r'^(.+)\s-\s[A-Z]{2,4}\d{0,2}.{0,1}[A-Za-z]{0,4}\d{1,3}'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)

	
	#no dash inbetween setNum
	pattern = r'^(.+)-\s.{4}\sEN\d{3}'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
	
	#bulk case
	pattern = r'^Random\s.*Yugioh\s.*'
	if(re.match(pattern,compareToThis) != None):
		return "Bulk"
	
	#World Champ case 2
	pattern = r'^(.+)\s-\s.{4}-.{2}\d{3}'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
	
	#playmat case
	pattern = r'^Yugioh\s(.*\sPlaymat)'
	if(re.match(pattern,compareToThis) !=None):
		return re.match(pattern,compareToThis).group(1)
	
	#complete set 
	pattern = r'^.+Complete Set of Prize'
	if(re.match(pattern,compareToThis) != None):
		return compareToThis
		
	#marshmallon
	pattern = r'^Marshmallon Misprint'
	if(re.match(pattern,compareToThis) != None):
		return compareToThis

	#no space dash before set num
	pattern = r'^(.+)\s[A-Z]{0,4}\d{0,2}-[A-Z]{0,4}\d{1,3}'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)

	return("Nothing Found")

import unittest
class TestParseProdNameMethods(unittest.TestCase):	
	
	def test_Ultimate_Rare3Char(self):
		testCase = 'Ultimate Rare - Ultimate Insect LV1 - SOD-EN005'
		testCaseStripped = 'Ultimate Insect LV1'
		self.assertEqual(testCaseStripped,parseProdName(testCase))
	
	def test_Ultimate_Rare4Char(self):
		testCase = 'Ultimate Rare - Black Rose Dragon - CSOC-EN039'
		testCaseStripped = 'Black Rose Dragon'
		self.assertEqual(testCaseStripped,parseProdName(testCase))

	def test_Generic3Char(self):
		testCase = 'Machine Duplication - RDS-EN041 - Rare'
		testCaseStripped = 'Machine Duplication'
		self.assertEqual(testCaseStripped,parseProdName(testCase))
	
	def test_Generic4Char(self):
		testCase = 'Machine Lord Ur - CSOC-EN093 - Secret Rare'
		testCaseStripped = 'Machine Lord Ur'
		self.assertEqual(testCaseStripped,parseProdName(testCase))
	
	def test_ABCdash123(self):
		testCase = 'Beast Fangs - LOB-041 - Common'
		testCaseStripped = 'Beast Fangs'
		self.assertEqual(testCaseStripped,parseProdName(testCase))
		
	def test_AB01dashEN123(self):
		testCase = 'Big Shield Gardna - CP01-EN006 - Rare'
		testCaseStripped = 'Big Shield Gardna'
		self.assertEqual(testCaseStripped,parseProdName(testCase))
	
	def test_AB01dashENS12(self):
		testCase = 'Earthbound Immortal Chacu Challhua - CT06-ENS03 - Secret Rare'
		testCaseStripped = 'Earthbound Immortal Chacu Challhua'
		self.assertEqual(testCaseStripped,parseProdName(testCase))
		
	def test_ABCdashENAB1(self):
		testCase = 'Elemental Hero Flame Wingman - DR3-EN215 - Ultra Rare'
		testCaseStripped = 'Elemental Hero Flame Wingman'
		self.assertEqual(testCaseStripped,parseProdName(testCase))
		
	def test_AB1dashA123(self):
		testCase = 'Valkyrion the Magna Warrior - WC4-E001 - Secret Rare'
		testCaseStripped = 'Valkyrion the Magna Warrior'
		self.assertEqual(testCaseStripped,parseProdName(testCase))
	
	def test_no_dash_in_setNumber(self):
		testCase = 'Shooting Star Dragon- STBL EN040 - Oversized Promo'
		testCaseStripped = 'Shooting Star Dragon'
		self.assertEqual(testCaseStripped,parseProdName(testCase))
	
	def test_IOC_SpecialEdition(self):
		testCase = 'Gemini Elf - IOC-SE1 - Ultra Rare'
		testCaseStripped = 'Gemini Elf'
		self.assertEqual(testCaseStripped,parseProdName(testCase))
	
	def test_WorldChampCase(self):
		testCase = 'Firewing Pegasus - WCS-AE503 - Super Rare'
		testCaseStripped = 'Firewing Pegasus'
		self.assertEqual(testCaseStripped,parseProdName(testCase))
	
	def test_WorldChampCase2(self):
		testCase = 'Legendary Dragon of White - 2013-AE003 - Super Rare'
		testCaseStripped = 'Legendary Dragon of White'
		self.assertEqual(testCaseStripped,parseProdName(testCase))

	def test_SpaceDashBetweenSetNum(self):
		testCase = 'Blackwing - Shura the Blue Flame - RGBT - EN011 - Common'
		testCaseStripped = 'Blackwing - Shura the Blue Flame'
		self.assertEqual(testCaseStripped,parseProdName(testCase))
	