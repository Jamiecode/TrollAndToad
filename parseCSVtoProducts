import csv
import re

# Example line from the CSV
# "4950521","Structure Deck: Master of Pendulum Singles","Dragonpit Magician - SDMP-EN002 - Common 1st Edition","Near Mint 1st Edition English Yugioh Card","0.75","12",""

class Product:

    def __init__(self,productID,packName,productName,rarity,edition,condition,buyPrice,buyQuantity):
      self.productId = productID
      self.packName = packName
      self.productName = productName
      self.rarity = rarity
      self.edition = edition
      self.condition = condition
      self.buyPrice = buyPrice
      self.buyQuantity = buyQuantity

    def getProductId(self):return self.productID
    def setProductID(self,productID):self.productID = productID
    
    def getPackName(self):return self.packName
    def setPackName(self,packName):self.packName = packName
    
    def getProductName(self):return self.productName
    def setProductName(self,productName):self.productName = productName
    
    def getEdition(self):return self.edition
    def setEdition(self,edition):self.edition = edition
    
    def getCondition(self):return self.condition
    def setCondition(self,condition):self.condition = condition
    
    def getBuyPrice(self):return self.buyPrice
    def setBuyPrice(self,buyPrice):self.buyPrice = buyPrice
    
    def getBuyQuantity(self):return self.buyQuantity
    def setBuyQuantity(self,buyQuantity):self.buyQuantity = buyQuantity
	def __str__(self):return(self.productName)


singlesList = []
with open('YugiohSinglesBuylist (2).csv',newline="") as f:
	reader = csv.reader(f)
	count = 0
	for row in reader:
		if(count ==0):count = count + 1
		else:
			prod = Product(row[0],row[1],row[2],row[2],row[3],row[3],row[4],row[5])
			singlesList.append(prod)
			count = count + 1
			if(count == 4):break

#Little Section right here on BadCases for my parseProdName method
with open('YugiohSinglesBuylist (2).csv',newline="") as f:
	reader = csv.reader(f)
	count = 0
	for row in reader:
		if(count ==0):count = count + 1
		else:
			cardName = parseProdName(row[2])
			if(cardName == 'Nothing Found'):
				print(count)
				print(row[2])
				count = count+1
				badCases = badCases +1
			else:count = count +1
			
#TODO:finish writing the methods to clean
def parseYGOList(rowFromReader):
	productId = rowFromReader[0]
	#packName goes here
	cardName = parseProdName(rowFromReader[2])
	#rarity goes here !!If ultimate rare, check rowFromReader[2] for ultimate rare, i.e. "rare" card but "ultimate rare" version
	#edition here
	#condition
	buyPrice = rowFromReader[4]
	buyQuantity = rowFromReader[5]
	
#TODO:Work on the various cases, maybe have to check vs certain sets, remember bulk case, playmat case
def parsePackName(string)
	#work on cleaning up the packName
	#potential cases to clean
	#"1st Edition Singles"
	
	#"Unlimited Singles
	#AB01 where there's two char followed by two int like RP01
	#AB1 two char followed by 1 int like DR1
	#ABC1 3 char followed by 1 int like GLD1
	#(ABCD) string of 4 chars inside parens 
	#(1234) 4ints to rep a year i.e. 2009

	
#TODO:Make this shit smaller 
def parseProdName(compareToThis):

	#I have to do the ultimate rare case first becasue it will otherwise get caught in the regular regex
	
	#general case
	
	#ABC-EN123 | ABCD-EN123
	pattern = r'^(.+)\s-\s.{0,4}\d{0,2}-.{0,2}\d{0,3}'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
	
	#ABCD - ENX01
	pattern = r'^(.+)\s-\s.{0,4}\d{0,2}-EN.{1,2}\d{1,2}'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)

	#ultimate Rare case 3char set
	pattern = r'^Ultimate\sRare\s-\s(.+)\s-\s(.{3,4}-EN\d{3})'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
	
	#no dash inbetween setNum
	pattern = r'^(.+)-\s.{4}\sEN\d{3}'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
	
	#no dash between name and Set
	pattern = r'^(.+).{4}-EN\d{3}'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)

	#bulk case
	pattern = r'^Random\s.*Yugioh\s.*'
	if(re.match(pattern,compareToThis) != None):
		return "Bulk"
	
	#World Champ case
	pattern = r'^(.+)\s-\s.{4}-.{2}\d{3}'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
	
	#playmat case
	pattern = r'^Yugioh\s(.*\sPlaymat)'
	if(re.match(pattern,compareToThis) !=None):
		return re.match(pattern,compareToThis).group(1)
	
	#complete set 
	pattern = r'^.+Complete Set of Prize'
	if(re.match(pattern,compareToThis) != None):
		return compareToThis
	#marshmallon
	pattern = r'^Marshmallon Misprint'
	if(re.match(pattern,compareToThis) != None):
		return compareToThis

	#Space dash between setName
	pattern = r'^(.+)\s-\s.{4}\s-\sEN\d{3}'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
	
	#no space dash ABC-123
	pattern = r'^(.+)\s.{3}-\d{3}'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)

	#dash spaec ABCD-ENAB1
	pattern = r'^(.+)-\s.{4}-EN.{2}\d{1}'
	if(re.match(pattern,compareToThis) != None):
		return re.match(pattern,compareToThis).group(1)
		
	return("Nothing Found")