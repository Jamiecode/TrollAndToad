import csv
import re

# Example line from the CSV
# "4950521","Structure Deck: Master of Pendulum Singles","Dragonpit Magician - SDMP-EN002 - Common 1st Edition","Near Mint 1st Edition English Yugioh Card","0.75","12",""

class Product:

    def __init__(self,productID,packName,productName,rarity,edition,condition,buyPrice,buyQuantity):
      self.productId = productID
      self.packName = packName
      self.productName = productName
      self.rarity = rarity
      self.edition = edition
      self.condition = condition
      self.buyPrice = buyPrice
      self.buyQuantity = buyQuantity

    def getProductId(self):return self.productID
    def setProductID(self,productID):self.productID = productID
    
    def getPackName(self):return self.packName
    def setPackName(self,packName):self.packName = packName
    
    def getProductName(self):return self.productName
    def setProductName(self,productName):self.productName = productName
    
    def getEdition(self):return self.edition
    def setEdition(self,edition):self.edition = edition
    
    def getCondition(self):return self.condition
    def setCondition(self,condition):self.condition = condition
    
    def getBuyPrice(self):return self.buyPrice
    def setBuyPrice(self,buyPrice):self.buyPrice = buyPrice
    
    def getBuyQuantity(self):return self.buyQuantity
    def setBuyQuantity(self,buyQuantity):self.buyQuantity = buyQuantity
	def __str__(self):return(self.productName)


singlesList = []
with open('YugiohSinglesBuylist (2).csv',newline="") as f:
	reader = csv.reader(f)
	count = 0
	for row in reader:
		if(count ==0):count = count + 1
		else:
			prod = Product(row[0],row[1],row[2],row[2],row[3],row[3],row[4],row[5])
			singlesList.append(prod)
			count = count + 1
			if(count == 4):break
			
#TODO:finish writing the methods to clean
def parseYGOList(rowFromReader):
	productId = rowFromReader[0]
	#packName goes here
	cardName = parseProdName(rowFromReader[2])
	#rarity goes here !!If ultimate rare, check rowFromReader[2] for ultimate rare, i.e. "rare" card but "ultimate rare" version
	#edition here
	#condition
	buyPrice = rowFromReader[4]
	buyQuantity = rowFromReader[5]
	
#TODO:Work on the various cases, maybe have to check vs certain sets, remember bulk case, playmat case
def parsePackName(string)
	#work on cleaning up the packName
	#potential cases to clean
	#"1st Edition Singles"
	
	#"Unlimited Singles
	#AB01 where there's two char followed by two int like RP01
	#AB1 two char followed by 1 int like DR1
	#ABC1 3 char followed by 1 int like GLD1
	#(ABCD) string of 4 chars inside parens 
	#(1234) 4ints to rep a year i.e. 2009

	
#TODO:swap to Regex
#TODO:figure out why my regex doesn't work
def parseProdName(exampleString):

	#ultimate rare case
	m = re.match(r"^\WUltimate\sRare\s-\s(.+)\s-\s(.{3}-EN\d{3})",exampleString)
	
	#FIX THIS
	#"Ultimate Rare - Broww, Huntsman of Dark World - EEN-EN021"
	#>>> p = re.compile(r'^\W+Ultimate\sRare\s-\s(.+)\s-\s(.{3}-EN\d{3})')
	#Compare the next two lines to figure out why the regex is broken.
	#"Ultimate Rare - A Feather of the Phoenix - FET-EN037"
	#>>> test_str = u"\"Ultimate Rare - A Feather of the Phoenix - FET-EN037\""
	#>>> re.search(p,test_str)
	#<_sre.SRE_Match object; span=(0, 53), match='"Ultimate Rare - A Feather of the Phoenix - FET-E>
	
	
	if(exampleString.find("Ultimate Rare") == 0):
		return parseProdName(exampleString[16:])
	
	#dash case
	#regex example
	m = re.match(r"^(.+)\s-\s(.{3}-\d{3})(.+)",exampleString)
	if (m == None):print("nothing to see here boys")
	return m.group(1)[0:-3]
	
	
	#bulk case
	if(exampleString.find("Random") != -1 and exampleString.find("Yugioh") != -1):
		return exampleString
	
	#playmat case
	if(exampleString.find("Playmat") != -1):
		return exampleString
	
	
	#dash case
	#regex example
	m = re.match(r"^(.+\s-\s)(.{3}-\d{3})(.+)",exampleString)
	return m.group(1)[0:-3]
	
	#general case
	cardName = exampleString[0:exampleString.find(" -")]
	return cardName
	
	
	